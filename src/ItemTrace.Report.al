#pragma warning disable AA0005, AA0008, AA0018, AA0021, AA0072, AA0137, AA0201, AA0206, AA0218, AA0228, AL0254, AL0424, AS0011, AW0006 // ForNAV settings
Report 53006 "TFB Item Trace"
{
    WordLayout = './Layouts/TFB Item Trace.docx';
    DefaultLayout = Word;
    Caption = 'Item Trace - Mass Report';
    ShowPrintStatus = true;
    AllowScheduling = true;
    ApplicationArea = All;
    DataAccessIntent = ReadOnly;
    PreviewMode = Normal;
    UsageCategory = ReportsAndAnalysis;

    dataset
    {
        dataitem(Item; Item)
        {
            RequestFilterFields = "No.", "Vendor No.", Type;


            column(ReportForNavId_1; 1) { } // Autogenerated by ForNav - Do not delete
            column(ReportForNav_Item; ReportForNavWriteDataItem('Item', Item)) { }
            dataitem(ItemLedgerEntryInbound; "Item Ledger Entry")
            {
                DataItemTableView = sorting("Posting Date") where(Positive = CONST(true));
                RequestFilterFields = "Document Type", "Lot No.";
                DataItemLink = "Item No." = FIELD("No.");
                column(ReportForNavId_2; 2) { } // Autogenerated by ForNav - Do not delete
                column(ReportForNav_ItemLedgerEntryInbound; ReportForNavWriteDataItem('ItemLedgerEntryInbound', ItemLedgerEntryInbound)) { }
                trigger OnPreDataItem();
                begin
                    ReportForNav.OnPreDataItem('ItemLedgerEntryInbound', ItemLedgerEntryInbound);
                end;
            }
            dataitem(ItemLedgerEntryOutbound; "Item Ledger Entry")
            {
                DataItemTableView = sorting("Posting Date") where(Positive = CONST(false));
                RequestFilterFields = "Document Type", "Lot No.";
                DataItemLink = "Item No." = FIELD("No.");
                column(ReportForNavId_3; 3) { } // Autogenerated by ForNav - Do not delete
                column(ReportForNav_ItemLedgerEntryOutbound; ReportForNavWriteDataItem('ItemLedgerEntryOutbound', ItemLedgerEntryOutbound)) { }
                trigger OnPreDataItem();
                begin
                    ReportForNav.OnPreDataItem('ItemLedgerEntryOutbound', ItemLedgerEntryOutbound);
                end;
            }
            trigger OnPreDataItem();
            begin
                ReportForNav.OnPreDataItem('Item', Item);
            end;
        }
    }
    requestpage
    {
        layout
        {
        }

    }

    trigger OnInitReport()
    begin
        ;
        ReportsForNavInit;

    end;

    trigger OnPostReport()
    begin
    end;

    trigger OnPreReport()
    begin
        ;
        ReportsForNavPre;
    end;

    // --> Reports ForNAV Autogenerated code - do not delete or modify
    var
        ReportForNav: Codeunit "ForNAV Report Management";
        ReportForNavTotalsCausedBy: Integer;
        ReportForNavInitialized: Boolean;
        ReportForNavShowOutput: Boolean;

    local procedure ReportsForNavInit()
    var
        id: Integer;
    begin
        Evaluate(id, CopyStr(CurrReport.ObjectId(false), StrPos(CurrReport.ObjectId(false), ' ') + 1));
        ReportForNav.OnInit(id);
    end;

    local procedure ReportsForNavPre()
    begin
    end;

    local procedure ReportForNavSetTotalsCausedBy(value: Integer)
    begin
        ReportForNavTotalsCausedBy := value;
    end;

    local procedure ReportForNavSetShowOutput(value: Boolean)
    begin
        ReportForNavShowOutput := value;
    end;

    local procedure ReportForNavInit(jsonObject: JsonObject)
    begin
        ReportForNav.Init(jsonObject, CurrReport.ObjectId);
    end;

    local procedure ReportForNavWriteDataItem(dataItemId: Text; rec: Variant): Text
    var
        values: Text;
        jsonObject: JsonObject;
        currLanguage: Integer;
    begin
        if not ReportForNavInitialized then begin
            ReportForNavInit(jsonObject);
            ReportForNavInitialized := true;
        end;

        case (dataItemId) of
            'Item':
                begin
                    currLanguage := GlobalLanguage;
                    GlobalLanguage := 1033;
                    jsonObject.Add('DataItem$Item$CurrentKey$Text', Item.CurrentKey);
                    GlobalLanguage := currLanguage;
                end;
            'ItemLedgerEntryInbound':
                begin
                    currLanguage := GlobalLanguage;
                    GlobalLanguage := 1033;
                    jsonObject.Add('DataItem$ItemLedgerEntryInbound$CurrentKey$Text', ItemLedgerEntryInbound.CurrentKey);
                    GlobalLanguage := currLanguage;
                end;
            'ItemLedgerEntryOutbound':
                begin
                    currLanguage := GlobalLanguage;
                    GlobalLanguage := 1033;
                    jsonObject.Add('DataItem$ItemLedgerEntryOutbound$CurrentKey$Text', ItemLedgerEntryOutbound.CurrentKey);
                    GlobalLanguage := currLanguage;
                end;
        end;
        ReportForNav.AddDataItemValues(jsonObject, dataItemId, rec);
        jsonObject.WriteTo(values);
        exit(values);
    end;
    // Reports ForNAV Autogenerated code - do not delete or modify -->

    var
        _RequestLot: Code[20];
}
