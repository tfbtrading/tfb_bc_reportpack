Report 53010 "TFB Brokerage Shipment"
{
    UsageCategory = ReportsAndAnalysis;
    ApplicationArea = All;
    WordLayout = './Layouts/TFB Brokerage Shipment v3.docx';
    DefaultLayout = Word;
    Caption = 'Brokerage Shipment';

    dataset
    {
        dataitem("TFB Brokerage Shipment"; "TFB Brokerage Shipment")
        {
            RequestFilterHeading = 'Brokerage shipment header fields';
            CalcFields = Amount, "Freight per MT";
            RequestFilterFields = "No.", "Contract No.";
            column(ReportForNavId_2; 2) { } // Autogenerated by ForNav - Do not delete
            column(ReportForNav_TFBBrokerageShipment; ReportForNavWriteDataItem('TFBBrokerageShipment', "TFB Brokerage Shipment")) { }
            dataitem("TFB Brokerage Shipment Line"; "TFB Brokerage Shipment Line")
            {
                RequestFilterHeading = 'Brokerage shipment line item fields';
                DataItemLink = "Document No." = FIELD("No.");
                DataItemLinkReference = "TFB Brokerage Shipment";
                column(ReportForNavId_3; 3) { } // Autogenerated by ForNav - Do not delete
                column(ReportForNav_TFBBrokerageShipmentLine; ReportForNavWriteDataItem('TFBBrokerageShipmentLine', "TFB Brokerage Shipment Line")) { }
            }
            trigger OnAfterGetRecord();

            begin

                CalcFields("Shipment Method Code", "Freight Extra", "Freight per MT", Amount);

                if "TFB Brokerage Shipment"."Customer Reference" = '' then
                    "TFB Brokerage Shipment"."Customer Reference" := "TFB Brokerage Shipment"."No.";
            end;

        }
    }


    requestpage
    {

        layout
        {
            area(content)
            {
                group(Options)
                {
                    Caption = 'Options';
                    field(ForNavOpenDesigner; ReportForNavOpenDesigner)
                    {
                        ApplicationArea = All;
                        ToolTip = 'Specifies to download the file for editing';
                        Caption = 'Design';
                        Visible = ReportForNavAllowDesign;
                        trigger OnValidate()
                        begin
                            ReportForNav.LaunchDesigner(ReportForNavOpenDesigner);
                            CurrReport.RequestOptionsPage.Close();
                        end;

                    }
                }
            }
        }

        actions
        {
        }
        trigger OnOpenPage()
        begin
            ReportForNavOpenDesigner := false;
        end;
    }

    trigger OnInitReport()
    begin
        ;
        ReportsForNavInit();

    end;

    trigger OnPostReport()
    begin


    end;

    trigger OnPreReport()
    begin
        ;
        ReportsForNavPre();
    end;

    // --> Reports ForNAV Autogenerated code - do not delete or modify
    var
        ReportForNav: Codeunit "ForNAV Report Management";
        ReportForNavInitialized: Boolean;
        ReportForNavShowOutput: Boolean;
        ReportForNavTotalsCausedBy: Boolean;
        ReportForNavOpenDesigner: Boolean;
        [InDataSet]
        ReportForNavAllowDesign: Boolean;

    local procedure ReportsForNavInit()
    var
        id: Integer;
    begin
        Evaluate(id, CopyStr(CurrReport.ObjectId(false), StrPos(CurrReport.ObjectId(false), ' ') + 1));
        ReportForNav.OnInit(id, ReportForNavAllowDesign);
    end;

    local procedure ReportsForNavPre()
    begin
        if ReportForNav.LaunchDesigner(ReportForNavOpenDesigner) then CurrReport.Quit();
    end;

    local procedure ReportForNavSetTotalsCausedBy(value: Boolean)
    begin
        ReportForNavTotalsCausedBy := value;
    end;

    local procedure ReportForNavSetShowOutput(value: Boolean)
    begin
        ReportForNavShowOutput := value;
    end;

    local procedure ReportForNavInit(jsonObject: JsonObject)
    begin
        ReportForNav.Init(jsonObject, CurrReport.ObjectId());
    end;

    local procedure ReportForNavWriteDataItem(dataItemId: Text; rec: Variant): Text
    var
        values: Text;
        jsonObject: JsonObject;
        currLanguage: Integer;
    begin
        if not ReportForNavInitialized then begin
            ReportForNavInit(jsonObject);
            ReportForNavInitialized := true;
        end;

        case (dataItemId) of
            'TFBBrokerageShipment':
                begin
                    currLanguage := GlobalLanguage;
                    GlobalLanguage := 1033;
                    jsonObject.Add('DataItem$TFBBrokerageShipment$CurrentKey$Text', "TFB Brokerage Shipment".CurrentKey);
                    GlobalLanguage := currLanguage;
                end;
            'TFBBrokerageShipmentLine':
                begin
                    currLanguage := GlobalLanguage;
                    GlobalLanguage := 1033;
                    jsonObject.Add('DataItem$TFBBrokerageShipmentLine$CurrentKey$Text', "TFB Brokerage Shipment Line".CurrentKey);
                    GlobalLanguage := currLanguage;
                end;
        end;
        ReportForNav.AddDataItemValues(jsonObject, dataItemId, rec);
        jsonObject.WriteTo(values);
        exit(values);
    end;
    // Reports ForNAV Autogenerated code - do not delete or modify -->
}
