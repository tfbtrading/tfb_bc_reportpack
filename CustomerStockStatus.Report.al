Report 53030 "TFB Customer Stock Status"
{
    Caption = 'In Stock Status';
    UsageCategory = Lists;
    ApplicationArea = All;
    WordLayout = '.\Layouts\TFB Customer Stock Status.docx';
    DefaultLayout = Word;

    dataset
    {
        dataitem(Customer; Customer)
        {
            PrintOnlyIfDetail = true;
            RequestFilterFields = "No.", "Customer Price Group";
            DataItemTableView = sorting("Customer Price Group", "No.") order(Descending);
            column(ReportForNavId_2; 2) { } // Autogenerated by ForNav - Do not delete
            column(ReportForNav_Customer; ReportForNavWriteDataItem('Customer', Customer)) { }
            dataitem(Item; Item)
            {
                RequestFilterFields = "Item Category Code";
                DataItemTableView = sorting("Item Category Code", Description);
                column(ReportForNavId_3; 3) { } // Autogenerated by ForNav - Do not delete
                column(ReportForNav_Item; ReportForNavWriteDataItem('Item', Item)) { }
                column(UnitType; UnitType)
                {
                    IncludeCaption = false;
                }
                column(PerPallet; PerPallet)
                {
                    IncludeCaption = false;
                }
                column(Status; Status)
                {
                    IncludeCaption = false;
                }
                column(InStockQty; InStockQty)
                {
                    IncludeCaption = false;
                }
                column(NextAvailDate; NextAvailDate)
                {
                    IncludeCaption = false;
                }
                column(NextAvailQty; NextAvailQty)
                {
                    IncludeCaption = false;
                }
                column(DropShip; DropShip)
                {
                    IncludeCaption = false;

                }
                column(BookmarkHTML; BookmarkHTML)
                {
                    IncludeCaption = false;
                }
                column(flagHTML; FlagHTML)
                {
                    IncludeCaption = false;
                }
                trigger OnAfterGetRecord();
                begin
                    GetAvailability(Item, Status, InStockQty, NextAvailDate, NextAvailQty, DropShip);

                    UnitType := GetUnitType(Item);
                    PerPallet := GetPerPallet(Item);
                    FlagHTML := GetFlagHTML("No.");
                    If BookMarkedItem = true then
                        BookmarkHTML := BookmarkHTMLResource
                    else
                        BookmarkHTML := '';
                end;

                trigger OnPreDataItem();

                begin
                    SetRange(Type, Type::Inventory);
                    SetRange("Sales Blocked", false);
                    SetRange("TFB Publishing Block", false);
                    SetAscending("Item Category Code", false);

                end;

            }
        }
    }


    requestpage
    {

        layout
        {
            area(content)
            {
                group(Options)
                {
                    Caption = 'Options';
                    field(ForNavOpenDesigner; ReportForNavOpenDesigner)
                    {
                        ApplicationArea = All;
                        Caption = 'Design';
                        Visible = ReportForNavAllowDesign;
                        ToolTip = 'Specifies that local designer file will be downloaded';
                        trigger OnValidate()
                        begin
                            ReportForNav.LaunchDesigner(ReportForNavOpenDesigner);
                            CurrReport.RequestOptionsPage.Close();
                        end;

                    }
                }
            }
        }

        actions
        {
        }
        trigger OnOpenPage()
        begin
            ReportForNavOpenDesigner := false;
        end;
    }

    trigger OnInitReport()
    begin
        ;
        ReportsForNavInit();

    end;

    trigger OnPostReport()
    begin







    end;

    trigger OnPreReport()
    begin
        ;
        ReportsForNavPre();
    end;

    var


        Status: enum "TFB Availability Status";
        DropShip: Boolean;
        InStockQty: Decimal;
        NextAvailDate: Date;
        NextAvailQty: Decimal;
        UnitType: Text;
        PerPallet: Integer;
        BookMarkedItem: Boolean;
        FlagHTML: Text;
        BookmarkHTMLResource: Text;
        BookmarkHTML: Text;

    local procedure GetFlagHTML(ItemNo: Code[20]): Text

    var

        Item: Record Item;
        HtmlBuilder: TextBuilder;

    begin

        If Item.Get(ItemNo) then begin

            HtmlBuilder.Append('<!DOCTYPE html><html><body><img src="https://flagpedia.net/data/flags/w580/%1.png" height="13" width="25" alt="Flag"></body></html>');
            HtmlBuilder.Replace('%1', LowerCase(Item."Country/Region of Origin Code"));

        end;
        Exit(HtmlBuilder.ToText());

    end;

    local procedure GetBookmarkHTML(): Text

    var
        HtmlBuilder: TextBuilder;
        BookMarkTxt: Label 'https://tfbdata001.blob.core.windows.net/pubresources/bookmarkicon1.png';

    begin
        HtmlBuilder.Append('<!DOCTYPE html><html><body><img src="%1" height="12" width="12" alt="Bookmark"></body></html>');
        HtmlBuilder.Replace('%1', BookMarkTxt);
        Exit(HtmlBuilder.ToText());
    end;

    local procedure GetAvailability(var ItemVar: Record Item; var _Status: enum "TFB Availability Status"; var _InStockQty: Decimal; var _NextAvailDate: Date; var _NextQtyRemaining: Decimal; var _DropShip: Boolean): Boolean
    var

        ItemLedger: Record "Item Ledger Entry";
        PurchasingCode: Record Purchasing;
        ResEntry: Record "Reservation Entry";
        QtyReserved: Decimal;


    begin

        _NextAvailDate := 0D;
        _NextQtyRemaining := 0;
        _InStockQty := 0;
        _Status := _Status::Okay;



        If PurchasingCode.Get(ItemVar."TFB Default Purch. Code") then
            If PurchasingCode."Drop Shipment" then
                _DropShip := true
            else
                _DropShip := false;


        //Item is not set as a drop ship item
        If _DropShip then
            case ItemVar."TFB DropShip Avail." of
                ItemVar."TFB DropShip Avail."::"Out of Stock":
                    begin
                        _Status := _Status::OutofStock;

                        If Item."TFB DropShip ETA" <> 0D then
                            _NextAvailDate := Item."TFB DropShip ETA";

                    end;
                ItemVar."TFB DropShip Avail."::Restricted:
                    _Status := _Status::Restricted;
                ItemVar."TFB DropShip Avail."::Available:
                    _Status := _Status::Okay;
            end
        else begin
            Clear(ItemLedger);
            ItemLedger.SetRange("Item No.", ItemVar."No.");
            ItemLedger.SetFilter("Entry Type", '%1|%2|%3|%4', ItemLedger."Entry Type"::Purchase, ItemLedger."Entry Type"::"Positive Adjmt.", ItemLedger."Entry Type"::Transfer, ItemLedger."Entry Type"::"Assembly Output");
            ItemLedger.SetRange(Open, true);


            If ItemLedger.CalcSums("Remaining Quantity") then begin

                ResEntry.SetRange("Source Type", 32);
                ResEntry.SetRange("Item No.", ItemVar."No.");
                ResEntry.SetRange("Reservation Status", ResEntry."Reservation Status"::Reservation);
                ResEntry.SetRange(Positive, true);
                ResEntry.CalcSums("Qty. to Handle (Base)");
                QtyReserved := ResEntry."Qty. to Handle (Base)";
                _InStockQty := ItemLedger."Remaining Quantity" - QtyReserved;
                If _InStockQty > 0 then
                    _Status := _Status::Okay
                else
                    _Status := _Status::OutofStock;

                GetDateOfNextOrderOrTransfer(ItemVar."No.", _NextQtyRemaining, _NextAvailDate);

            end;

        end;
    end;

    local procedure GetBookmarkStatus(ItemNo: Code[20]; CustNo: Code[20]): Boolean

    var
        ItemLedger: Record "Item Ledger Entry";
        DateFormula: DateFormula;

    begin

        Clear(ItemLedger);
        Evaluate(DateFormula, '-6M');
        ItemLedger.SetRange("Item No.", ItemNo);
        ItemLedger.SetRange("Source Type", ItemLedger."Source Type"::Customer);
        ItemLedger.SetRange("Source No.", CustNo);
        ItemLedger.SetRange("Document Type", ItemLedger."Document Type"::"Sales Shipment");
        ItemLedger.SetFilter(Quantity, '<>0');
        ItemLedger.CalcSums(Quantity);

        If ABS(ItemLedger.Quantity) > 0 then
            Exit(True)
        else
            Exit(false);


    end;

    local procedure GetUnitType(var ItemVar: Record Item): Text

    var

        UoM: Record "Unit of Measure";


    begin

        If UoM.Get(ItemVar."Base Unit of Measure") then
            Exit(Format(Item."Net Weight") + 'kg net ' + UoM.Description);
    end;

    local procedure GetPerPallet(var ItemVar: Record Item): Integer

    var

        iUoM: Record "Item Unit of Measure";

    begin

        iUoM.SetRange("Item No.", ItemVar."No.");
        iUoM.SetRange(Code, 'PALLET');

        If iUOM.FindFirst() then
            Exit(iUoM."Qty. per Unit of Measure");
    end;

    local procedure GetAQISFactors(var ItemVar: Record Item): Text
    var

        ReturnText: TextBuilder;
    begin


        If ItemVar."TFB Fumigation" then
            ReturnText.Append('F');

        If ItemVar."TFB Inspection" then
            if ReturnText.Length() > 0 then
                ReturnText.Append(',I')
            else
                ReturnText.Append('I');

        exit(ReturnText.ToText()); // Added an exit to reset the global var when function cannot find a result
    end;

    local procedure GetDateOfNextOrderOrTransfer(ItemNo: Code[20]; var "Remaining Qty. (Base)": Decimal; var "Avail. Date": Date): Boolean

    var
        TransferLine: Record "Transfer Line";
        OrderLine: Record "Purchase Line";

        TransferSupplyFound: Boolean;
        OrderSupplyFound: Boolean;

    begin




        //Assume there is a transfer line set up related to a container

        TransferLine.SetRange("Item No.", ItemNo);
        TransferLine.SetFilter("Outstanding Qty. (Base)", '>0');
        TransferLine.SetCurrentKey("Receipt Date");
        If TransferLine.FindFirst() then begin
            TransferLine.CalcFields("Reserved Qty. Shipped (Base)");
            "Remaining Qty. (Base)" := TransferLine."Qty. Shipped (Base)" - TransferLine."Reserved Qty. Shipped (Base)";
            If "Remaining Qty. (Base)" > 0 then begin
                "Avail. Date" := TransferLine."Receipt Date";
                TransferSupplyFound := true;
            end;
        end;


        //Check for a local purchase order coming to the warehouse
        OrderLine.SetRange("Document Type", Orderline."Document Type"::Order);
        OrderLine.SetRange("No.", ItemNo);
        OrderLine.SetRange("Drop Shipment", false);
        OrderLine.SetFilter("Outstanding Qty. (Base)", '>0');
        OrderLine.SetCurrentKey("Expected Receipt Date");

        If OrderLine.FindSet(false, false) then
            repeat
                If (not TransferSupplyFound) or (TransferSupplyFound and (OrderLine."Expected Receipt Date" < TransferLine."Receipt Date")) then begin
                    OrderLine.CalcFields("Reserved Qty. (Base)");
                    "Remaining Qty. (Base)" := OrderLine."Quantity (Base)" - OrderLine."Reserved Qty. (Base)";
                    If "Remaining Qty. (Base)" > 0 then begin
                        "Avail. Date" := OrderLine."Expected Receipt Date";
                        OrderSupplyFound := true;
                    end;
                end;
            // process record  
            until ((OrderLine.Next() = 0) or (OrderSupplyFound = true));

        If TransferSupplyFound or OrderSupplyFound then Exit(true) else Exit(False);


    end;

    // --> Reports ForNAV Autogenerated code - do not delete or modify
    var
        ReportForNav: Codeunit "ForNAV Report Management";
        ReportForNavInitialized: Boolean;
        ReportForNavShowOutput: Boolean;
        ReportForNavTotalsCausedBy: Boolean;
        ReportForNavOpenDesigner: Boolean;
        [InDataSet]
        ReportForNavAllowDesign: Boolean;

    local procedure ReportsForNavInit()
    var
        id: Integer;
    begin
        Evaluate(id, CopyStr(CurrReport.ObjectId(false), StrPos(CurrReport.ObjectId(false), ' ') + 1));
        ReportForNav.OnInit(id, ReportForNavAllowDesign);
    end;

    local procedure ReportsForNavPre()
    begin
        if ReportForNav.LaunchDesigner(ReportForNavOpenDesigner) then CurrReport.Quit();
    end;

    local procedure ReportForNavSetTotalsCausedBy(value: Boolean)
    begin
        ReportForNavTotalsCausedBy := value;
    end;

    local procedure ReportForNavSetShowOutput(value: Boolean)
    begin
        ReportForNavShowOutput := value;
    end;

    local procedure ReportForNavInit(jsonObject: JsonObject)
    begin
        ReportForNav.Init(jsonObject, CurrReport.ObjectId());
    end;

    local procedure ReportForNavWriteDataItem(dataItemId: Text; rec: Variant): Text
    var
        values: Text;
        jsonObject: JsonObject;
   
    begin
        if not ReportForNavInitialized then begin
            ReportForNavInit(jsonObject);
            ReportForNavInitialized := true;
        end;

        case (dataItemId) of
        end;
        ReportForNav.AddDataItemValues(jsonObject, dataItemId, rec);
        jsonObject.WriteTo(values);
        exit(values);
    end;
    // Reports ForNAV Autogenerated code - do not delete or modify -->
}
