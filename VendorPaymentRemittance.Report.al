#pragma warning disable AA0005, AA0008, AA0018, AA0021, AA0072, AA0137, AA0201, AA0206, AA0218, AA0228, AL0254, AL0424, AS0011, AW0006 // ForNAV settings
Report 53007 "TFB Vendor Payment Remittance"
{
    WordLayout = './Layouts/TFBVendorPaymentRemittance.docx';
    DefaultLayout = Word;
    Caption = 'Vendor Payment Remittance';
    DataAccessIntent = ReadOnly;
    Permissions = tabledata "Vendor Ledger Entry" = R, tabledata "Detailed Vendor Ledg. Entry" = R;
    UsageCategory = ReportsAndAnalysis;
    dataset
    {
        dataitem(PaymentLedgerEntries; "Vendor Ledger Entry")
        {
            CalcFields = "Remaining Amount", "Remaining Amt. (LCY)";
            DataItemTableView = sorting("Vendor No.") where("Document Type" = CONST(Payment));
            RequestFilterFields = "Vendor No.", "Posting Date", "Currency Code", "Entry No.";
            RequestFilterHeading = 'Vendor Ledger Entries';
            column(ReportForNavId_1; 1) { } // Autogenerated by ForNav - Do not delete
            column(ReportForNav_PaymentLedgerEntries; ReportForNavWriteDataItem('PaymentLedgerEntries', PaymentLedgerEntries)) { }
            dataitem(AppliedLedgerEntries; "Vendor Ledger Entry")
            {
                column(ReportForNavId_2; 2) { } // Autogenerated by ForNav - Do not delete
                column(ReportForNav_AppliedLedgerEntries; ReportForNavWriteDataItem('AppliedLedgerEntries', AppliedLedgerEntries)) { }
                dataitem(DetailedLedgerEntries; "Detailed Vendor Ledg. Entry")
                {
                    DataItemTableView = sorting("Vendor Ledger Entry No.", "Entry Type", "Posting Date") where("Entry Type" = CONST(Application), "Document Type" = CONST("Credit Memo"));
                    DataItemLink = "Vendor Ledger Entry No." = FIELD("Entry No."), "Initial Document Type" = FIELD("Document Type");
                    column(ReportForNavId_3; 3) { } // Autogenerated by ForNav - Do not delete
                    column(ReportForNav_DetailedLedgerEntries; ReportForNavWriteDataItem('DetailedLedgerEntries', DetailedLedgerEntries)) { }



                    trigger OnPreDataItem();
                    begin
                        DetailedLedgerEntries.SetView(ReportForNav.OnPreDataItemView('DetailedLedgerEntries', DetailedLedgerEntries));
                    end;

                    trigger OnAfterGetRecord();
                    var

                    begin
                        AlreadyAppliedVendLedgEntry.Get("Applied Vend. Ledger Entry No.");
                        if DetailedLedgerEntries."Vendor Ledger Entry No." = DetailedLedgerEntries."Applied Vend. Ledger Entry No." then
                            CurrReport.Skip();

                    end;

                }



                trigger OnPreDataItem();
                var

                begin

                    CreateVendLedgEntry := PaymentLedgerEntries;
                    FindApplnEntriesDtldtLedgEntry();
                    AppliedLedgerEntries.SetCurrentKey("Entry No.");
                    AppliedLedgerEntries.SetRange("Entry No.");

                    if CreateVendLedgEntry."Closed by Entry No." <> 0 then begin
                        AppliedLedgerEntries."Entry No." := CreateVendLedgEntry."Closed by Entry No.";
                        AppliedLedgerEntries.Mark(true);
                    end;

                    AppliedLedgerEntries.SetCurrentKey("Closed by Entry No.");
                    AppliedLedgerEntries.SetRange("Closed by Entry No.", CreateVendLedgEntry."Entry No.");
                    if AppliedLedgerEntries.FindSet(false) then
                        repeat
                            AppliedLedgerEntries.Mark(true);
                        until AppliedLedgerEntries.Next() = 0;

                    AppliedLedgerEntries.SetCurrentKey("Entry No.");
                    AppliedLedgerEntries.SetRange("Closed by Entry No.");
                    AppliedLedgerEntries.MarkedOnly(true);
                    AppliedLedgerEntries.SetView(ReportForNav.OnPreDataItemView('AppliedLedgerEntries', AppliedLedgerEntries));
                end;

                trigger OnAfterGetRecord();
                var
                    DtldVendLedgEntry: Record "Detailed Vendor Ledg. Entry";
                begin
                    CalcFields(Amount, "Remaining Amount");
                    DtldVendLedgEntry.SetRange("Vendor Ledger Entry No.", "Entry No.");
                    DtldVendLedgEntry.SetRange("Entry Type", DtldVendLedgEntry."Entry Type"::Application);
                    DtldVendLedgEntry.SetRange("Document Type", DtldVendLedgEntry."Document Type"::Payment);
                    DtldVendLedgEntry.SetRange("Document No.", PaymentLedgerEntries."Document No.");
                    DtldVendLedgEntry.SetRange(Unapplied, false);
                    if DtldVendLedgEntry.IsEmpty() then
                        CurrReport.Skip();


                end;

            }
            trigger OnPreDataItem();
            begin
                PaymentLedgerEntries.SetView(ReportForNav.OnPreDataItemView('PaymentLedgerEntries', PaymentLedgerEntries));
            end;

        }
    }

    requestpage
    {

        SaveValues = true;
        layout
        {
            area(content)
            {
                group(Options)
                {
                    Caption = 'Options';
                    field(Language; LanguageName)
                    {
                        CaptionClass = 'ForNAV,Ledger@Language@Name';
                        ApplicationArea = Basic;
                        trigger OnValidate()
                        begin
                            Translation.GetLanguage(LanguageName);
                        end;

                        trigger OnLookup(var Text: Text): Boolean
                        begin
                            Translation.LookupLanguage(LanguageName);
                        end;
                    }
                }
            }
        }

        var
            Translation: Codeunit "ForNAV Translation";


        // trigger OnOpenPage()
        // begin
        //	 if LanguageName = '' then
        //		 Translation.GetLanguage(LanguageName);
        // end;
    }
    var
        LanguageName: Text[50];
        LineAmount: Decimal;
        CreateVendLedgEntry: Record "Vendor Ledger Entry";
        CreateVendLedgEntry2: Record "Vendor Ledger Entry";

    trigger OnInitReport()
    var
        Translation: Codeunit "ForNAV Translation";
    begin
        Translation.GetLanguage(LanguageName);
        ;
        ReportsForNavInit;
    end;

    trigger OnPostReport()
    begin


    end;

    trigger OnPreReport()
    var
        Translation: Codeunit "ForNAV Translation";
    begin
        CurrReport.Language := Translation.GetLanguage(LanguageName);
        ;
        ReportsForNavPre;

    end;

    local procedure FindApplnEntriesDtldtLedgEntry()
    var
        DtldVendLedgEntry1: Record "Detailed Vendor Ledg. Entry";
        DtldVendLedgEntry2: Record "Detailed Vendor Ledg. Entry";
    begin
        DtldVendLedgEntry1.Reset();
        DtldVendLedgEntry1.SetCurrentKey("Vendor Ledger Entry No.");
        DtldVendLedgEntry1.SetRange("Vendor Ledger Entry No.", CreateVendLedgEntry."Entry No.");
        DtldVendLedgEntry1.SetRange(Unapplied, false);
        if DtldVendLedgEntry1.Find('-') then
            repeat
                if DtldVendLedgEntry1."Vendor Ledger Entry No." =
                   DtldVendLedgEntry1."Applied Vend. Ledger Entry No."
                then begin
                    DtldVendLedgEntry2.Reset();
                    DtldVendLedgEntry2.SetCurrentKey("Applied Vend. Ledger Entry No.", "Entry Type");
                    DtldVendLedgEntry2.SetRange(
                      "Applied Vend. Ledger Entry No.", DtldVendLedgEntry1."Applied Vend. Ledger Entry No.");
                    DtldVendLedgEntry2.SetRange("Entry Type", DtldVendLedgEntry2."Entry Type"::Application);
                    DtldVendLedgEntry2.SetRange(Unapplied, false);
                    if DtldVendLedgEntry2.Find('-') then
                        repeat
                            if DtldVendLedgEntry2."Vendor Ledger Entry No." <>
                               DtldVendLedgEntry2."Applied Vend. Ledger Entry No."
                            then begin
                                AppliedLedgerEntries.SetCurrentKey("Entry No.");
                                AppliedLedgerEntries.SetRange("Entry No.", DtldVendLedgEntry2."Vendor Ledger Entry No.");
                                if AppliedLedgerEntries.FindSet(false) then
                                    AppliedLedgerEntries.Mark(true);
                            end;
                        until DtldVendLedgEntry2.Next() = 0;
                end else begin
                    AppliedLedgerEntries.SetCurrentKey("Entry No.");
                    AppliedLedgerEntries.SetRange("Entry No.", DtldVendLedgEntry1."Applied Vend. Ledger Entry No.");
                    if AppliedLedgerEntries.Find('-') then
                        AppliedLedgerEntries.Mark(true);
                end;
            until DtldVendLedgEntry1.Next() = 0;
    end;


   

    // --> Reports ForNAV Autogenerated code - do not delete or modify
    var
        ReportForNav: Codeunit "ForNAV Report Management";
        ReportForNavTotalsCausedBy: Integer;
        ReportForNavInitialized: Boolean;
        ReportForNavShowOutput: Boolean;
        ReportForNavOpenDesigner: Boolean;
        [InDataSet]
        ReportForNavAllowDesign: Boolean;
        AlreadyAppliedVendLedgEntry: Record "Vendor Ledger Entry";

    local procedure ReportsForNavInit()
    var
        id: Integer;
    begin
        Evaluate(id, CopyStr(CurrReport.ObjectId(false), StrPos(CurrReport.ObjectId(false), ' ') + 1));
        ReportForNav.OnInit(id, ReportForNavAllowDesign);
    end;

    local procedure ReportsForNavPre()
    begin
        if ReportForNav.LaunchDesigner(ReportForNavOpenDesigner) then CurrReport.Quit();
    end;

    local procedure ReportForNavSetTotalsCausedBy(value: Integer)
    begin
        ReportForNavTotalsCausedBy := value;
    end;

    local procedure ReportForNavSetShowOutput(value: Boolean)
    begin
        ReportForNavShowOutput := value;
    end;

    local procedure ReportForNavInit(jsonObject: JsonObject)
    begin
        ReportForNav.Init(jsonObject, CurrReport.ObjectId);
    end;

    local procedure ReportForNavWriteDataItem(dataItemId: Text; rec: Variant): Text
    var
        values: Text;
        jsonObject: JsonObject;
        currLanguage: Integer;
    begin
        if not ReportForNavInitialized then begin
            ReportForNavInit(jsonObject);
            ReportForNavInitialized := true;
        end;

        case (dataItemId) of
            'AppliedLedgerEntries':
                begin
                    currLanguage := GlobalLanguage;
                    GlobalLanguage := 1033;
                    jsonObject.Add('DataItem$AppliedLedgerEntries$CurrentKey$Text', AppliedLedgerEntries.CurrentKey);
                    GlobalLanguage := currLanguage;
                end;
        end;
        ReportForNav.AddDataItemValues(jsonObject, dataItemId, rec);
        jsonObject.WriteTo(values);
        exit(values);
    end;
    // Reports ForNAV Autogenerated code - do not delete or modify -->
}
