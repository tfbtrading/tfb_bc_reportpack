Report 53040 "TFB Blanket Sales Contract"
{
    Caption = 'Blanket Sales Contract';
    UsageCategory = ReportsAndAnalysis;
    WordLayout = './Layouts/TFB Blanket Sales Contract.docx';
    DefaultLayout = Word;

    dataset
    {
        dataitem(Header; "Sales Header")
        {
            CalcFields = "Amount Including VAT", Amount;
            DataItemTableView = sorting("No.") where("Document Type" = const("Blanket Order"));
            RequestFilterFields = "No.", "Posting Date";
            column(ReportForNavId_2; 2) { } // Autogenerated by ForNav - Do not delete
            column(ReportForNav_Header; ReportForNavWriteDataItem('Header', Header)) { }
            column(HasDiscount; ForNAVCheckDocumentDiscount.HasDiscount(Header))
            {
                IncludeCaption = false;
            }
            dataitem(Line; "Sales Line")
            {
                DataItemLinkReference = Header;
                DataItemLink = "Document No." = FIELD("No."), "Document Type" = FIELD("Document Type");
                DataItemTableView = sorting("Document No.", "Line No.");
                column(ReportForNavId_3; 3) { } // Autogenerated by ForNav - Do not delete
                column(ReportForNav_Line; ReportForNavWriteDataItem('Line', Line)) { }
                trigger OnPreDataItem();
                begin
                    ForNavReportManagement.OnPreDataItem('Line', Line);
                end;

            }
            dataitem(VATAmountLine; "VAT Amount Line")
            {
                UseTemporary = true;
                DataItemTableView = sorting("VAT Identifier", "VAT Calculation Type", "Tax Group Code", "Use Tax", Positive);
                column(ReportForNavId_1000000001; 1000000001) { } // Autogenerated by ForNav - Do not delete
                column(ReportForNav_VATAmountLine; ReportForNavWriteDataItem('VATAmountLine', VATAmountLine)) { }
                trigger OnPreDataItem();
                begin
                    if not PrintVATAmountLines() then
                        CurrReport.Break();
                    ForNavReportManagement.OnPreDataItem('VATAmountLine', VATAmountLine);
                end;

            }
            dataitem(VATClause; "VAT Clause")
            {
                UseTemporary = true;
                DataItemTableView = sorting(Code);
                column(ReportForNavId_1000000002; 1000000002) { } // Autogenerated by ForNav - Do not delete
                column(ReportForNav_VATClause; ReportForNavWriteDataItem('VATClause', VATClause)) { }
                trigger OnPreDataItem();
                begin
                    ForNavReportManagement.OnPreDataItem('VATClause', VATClause);
                end;

            }
            trigger OnPreDataItem();
            begin
                ForNavReportManagement.OnPreDataItem('Header', Header);
            end;

            trigger OnAfterGetRecord();
            begin

                ChangeLanguage("Language Code");
                GetVatAmountLines();
                GetVATClauses();
                UpdateNoPrinted();

            end;

        }
    }


    requestpage
    {

        SaveValues = true;

        layout
        {
            area(content)
            {
                group(Options)
                {
                    Caption = 'Options';
                    field(NoOfCopies; _NoOfCopies)
                    {
                        ApplicationArea = Basic, Suite;
                        Caption = 'No. of Copies';
                        ToolTip = 'Specifies the value of the No. of Copies field';
                    }
                    field(ForNavOpenDesigner; ReportForNavOpenDesigner)
                    {
                        ApplicationArea = Basic, Suite;
                        Caption = 'Design';
                        Visible = ReportForNavAllowDesign;
                        ToolTip = 'Specifies the value of the Design field';
                        trigger OnValidate()
                        begin
                            ForNavReportManagement.LaunchDesigner(ReportForNavOpenDesigner);
                            CurrReport.RequestOptionsPage.Close();
                        end;
                    }
                }
            }
        }

        actions
        {
        }
        trigger OnOpenPage()
        begin
            ReportForNavOpenDesigner := false;
        end;
    }

    trigger OnInitReport()
    begin
        ;
        ReportsForNavInit();
        Codeunit.Run(Codeunit::"ForNAV First Time Setup");
    end;

    trigger OnPostReport()
    begin


    end;

    trigger OnPreReport()
    begin
        ;

        ForNavReportManagement.SetCopies('Header', _NoOfCopies);
        LoadWatermark();
        ;
        ReportsForNavPre();

    end;

    var
        ForNAVCheckDocumentDiscount: Codeunit "ForNAV Check Document Discount";
        _NoOfCopies: Integer;

    local procedure ChangeLanguage(LanguageCode: Code[10])
    var
        ForNAVSetup: Record "ForNAV Setup";
    begin
        ForNAVSetup.Get();
        if ForNAVSetup."Inherit Language Code" then
            CurrReport.Language(ForNavReportManagement.GetLanguageID(LanguageCode));
    end;

    local procedure GetVatAmountLines()
    var
        ForNAVGetVatAmountLines: Codeunit "ForNAV Get Vat Amount Lines";
    begin
        VATAmountLine.DeleteAll();
        ForNAVGetVatAmountLines.GetVatAmountLines(Header, VATAmountLine);
    end;

    local procedure GetVATClauses()
    var
        ForNAVGetVatClause: Codeunit "ForNAV Get Vat Clause";
    begin
        VATClause.DeleteAll();
        ForNAVGetVatClause.GetVATClauses(VATAmountLine, VATClause, Header."Language Code");
    end;

    local procedure PrintVATAmountLines(): Boolean
    var
        ForNAVSetup: Record "ForNAV Setup";
    begin
        ForNAVSetup.Get();
        case ForNAVSetup."VAT Report Type" of
            ForNAVSetup."vat report type"::Always:
                exit(true);
            ForNAVSetup."vat report type"::"Multiple Lines":
                exit(VATAmountLine.Count > 1);
            ForNAVSetup."vat report type"::Never:
                exit(false);
        end;

    end;

    local procedure UpdateNoPrinted()
    var
        ForNAVUpdateNoPrinted: Codeunit "ForNAV Update No. Printed";
    begin
        ForNAVUpdateNoPrinted.UpdateNoPrinted(Header, CurrReport.Preview);
    end;

    local procedure LoadWatermark()
    var
        ForNAVSetup: Record "ForNAV Setup";

    begin
        ForNAVSetup.Get();
        if not PrintLogo(ForNAVSetup) then
            exit;
        ForNAVSetup.CalcFields(ForNAVSetup."Document Watermark");
        if not ForNAVSetup."Document Watermark".Hasvalue then
            exit;

        ForNavReportManagement.LoadWatermarkImage(ForNAVSetup.GetDocumentWatermark());

    end;

    procedure PrintLogo(ForNAVSetup: Record "ForNAV Setup"): Boolean
    begin
        if not ForNAVSetup."Use Preprinted Paper" then
            exit(true);

        exit(false);
    end;

    // --> Reports ForNAV Autogenerated code - do not delete or modify
    var
        ForNavReportManagement: Codeunit "ForNAV Report Management";
        ReportForNavInitialized: Boolean;

        ReportForNavOpenDesigner: Boolean;
        [InDataSet]
        ReportForNavAllowDesign: Boolean;

    local procedure ReportsForNavInit()
    var
        id: Integer;
    begin
        Evaluate(id, CopyStr(CurrReport.ObjectId(false), StrPos(CurrReport.ObjectId(false), ' ') + 1));
        ForNavReportManagement.OnInit(id, ReportForNavAllowDesign);
    end;

    local procedure ReportsForNavPre()
    begin
        if ForNavReportManagement.LaunchDesigner(ReportForNavOpenDesigner) then CurrReport.Quit();
    end;


    local procedure ReportForNavInit(jsonObject: JsonObject)
    begin
        ForNavReportManagement.Init(jsonObject, CurrReport.ObjectId());
    end;

    local procedure ReportForNavWriteDataItem(dataItemId: Text; rec: Variant): Text
    var
        values: Text;
        jsonObject: JsonObject;

    begin
        if not ReportForNavInitialized then begin
            ReportForNavInit(jsonObject);
            ReportForNavInitialized := true;
        end;

        case (dataItemId) of
            'Header':
                jsonObject.Add('CurrReport$Language$Integer', CurrReport.Language);

        end;
        ForNavReportManagement.AddDataItemValues(jsonObject, dataItemId, rec);
        jsonObject.WriteTo(values);
        exit(values);
    end;
    // Reports ForNAV Autogenerated code - do not delete or modify -->
}
