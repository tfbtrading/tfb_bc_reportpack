Report 53002 "TFB Brokerage Invoice"
{
    Caption = 'Brokerage Invoice';
    UsageCategory = ReportsAndAnalysis;
    ApplicationArea = All;
    WordLayout = './Layouts/TFB Brokerage Invoice.docx';
    DefaultLayout = Word;

    dataset
    {
        dataitem(Header; "Sales Invoice Header")
        {
            RequestFilterHeading = 'Invoice header fields';
            CalcFields = "Amount Including VAT", Amount, "Work Description";
            //DataItemTableView = sorting("No.");
            RequestFilterFields = "No.", "Posting Date";
            column(ReportForNavId_2; 2) { } // Autogenerated by ForNav - Do not delete
            column(ReportForNav_Header; ReportForNavWriteDataItem('Header', Header)) { }
            column(HasDiscount; ForNAVCheckDocumentDiscount.HasDiscount(Header))
            {
                IncludeCaption = false;
            }
            column(TFBLineWorkDescription; TFBLineWorkDescription)
            {
                IncludeCaption = false;
            }
            dataitem(Line; "Sales Invoice Line")
            {
                RequestFilterHeading = 'Invoice line fields';
                DataItemTableView = sorting("Document No.", "Line No.");
                DataItemLink = "Document No." = FIELD("No.");
                DataItemLinkReference = Header;
                column(ReportForNavId_3; 3) { } // Autogenerated by ForNav - Do not delete
                column(ReportForNav_Line; ReportForNavWriteDataItem('Line', Line)) { }
            }
            dataitem(SalesTaxBuffer; "ForNAV Sales Tax Buffer")
            {
                RequestFilterHeading = 'Sales Tax Info';
                UseTemporary = true;
                DataItemTableView = sorting("Primary Key");
                column(ReportForNavId_1; 1) { } // Autogenerated by ForNav - Do not delete
                column(ReportForNav_SalesTaxBuffer; ReportForNavWriteDataItem('SalesTaxBuffer', SalesTaxBuffer)) { }
            }
            trigger OnAfterGetRecord();

            var
                TextStream: InStream;

            begin

                ChangeLanguage("Language Code");
                GetSalesTaxDetails();
                UpdateNoPrinted();

                Header.CALCFIELDS("Work Description");
                Header."Work Description".CREATEINSTREAM(TextStream);
                TextStream.ReadText(TFBLineWorkDescription)

            end;

        }
    }


    requestpage
    {
        SaveValues = true;

        layout
        {
            area(content)
            {
                group(Options)
                {
                    Caption = 'Options';
                    field(NoOfCopies; NoOfCopiesVar)
                    {
                        ApplicationArea = All;
                        Caption = 'No. of Copies';
                        ToolTip = 'Specifies number of copies printed';
                    }
                    field(ForNavOpenDesigner; ReportForNavOpenDesigner)
                    {
                        ApplicationArea = All;
                        Caption = 'Design';
                        Visible = ReportForNavAllowDesign;
                        ToolTip = 'Specifies that the designer will download a file for editing';
                        trigger OnValidate()
                        begin
                            ReportForNav.LaunchDesigner(ReportForNavOpenDesigner);
                            CurrReport.RequestOptionsPage.Close();
                        end;

                    }
                }
            }
        }

        actions
        {
        }
        trigger OnOpenPage()
        begin
            ReportForNavOpenDesigner := false;
        end;
    }

    trigger OnInitReport()
    begin
        Codeunit.Run(Codeunit::"ForNAV First Time Setup");
        ;
        ReportsForNavInit();
    end;

    trigger OnPostReport()
    begin

    end;

    trigger OnPreReport()
    begin
        ReportForNav.SetCopies('Header', NoOfCopiesVar);
        LoadWatermark();
        ;
        ReportsForNavPre();
    end;

    var
        ForNAVCheckDocumentDiscount: Codeunit "ForNAV Check Document Discount";
        NoOfCopiesVar: Integer;

    local procedure ChangeLanguage(LanguageCode: Code[10])
    var
        ForNAVSetup: Record "ForNAV Setup";
        LanguageCU: CodeUnit Language;
    begin
        ForNAVSetup.Get();
        if ForNAVSetup."Inherit Language Code" then
            CurrReport.Language(LanguageCU.GetLanguageID(LanguageCode));
    end;

    local procedure GetSalesTaxDetails()
    var
        ForNAVGetSalesTaxDetails: Codeunit "ForNAV Get Sales Tax Details";
    begin
        SalesTaxBuffer.DeleteAll();
        ForNAVGetSalesTaxDetails.GetSalesTax(Header, SalesTaxBuffer);
    end;

    local procedure UpdateNoPrinted()
    var
        ForNAVUpdateNoPrinted: Codeunit "ForNAV Update No. Printed";
    begin
        ForNAVUpdateNoPrinted.UpdateNoPrinted(Header, CurrReport.Preview());
    end;

    local procedure LoadWatermark()
    var
        ForNAVSetup: Record "ForNAV Setup";

    begin
        
           ForNAVSetup.Get();
            if not PrintLogo(ForNAVSetup) then
                exit;
            ForNAVSetup.CalcFields("Document Watermark");
            if not ForNAVSetup."Document Watermark".Hasvalue() then
                exit;

            ReportForNav.LoadWatermarkImage(ForNAVSetup.GetDocumentWatermark());
        
    end;

    procedure PrintLogo(ForNAVSetup: Record "ForNAV Setup"): Boolean
    begin
        if not ForNAVSetup."Use Preprinted Paper" then
            exit(true);

        exit(false);
    end;

    var
        TFBLineWorkDescription: Text;

    // --> Reports ForNAV Autogenerated code - do not delete or modify
    var
        ReportForNav: Codeunit "ForNAV Report Management";
        ReportForNavInitialized: Boolean;
        ReportForNavShowOutput: Boolean;
        ReportForNavTotalsCausedBy: Boolean;
        ReportForNavOpenDesigner: Boolean;
        [InDataSet]
        ReportForNavAllowDesign: Boolean;

    local procedure ReportsForNavInit()
    var
        id: Integer;
    begin
        Evaluate(id, CopyStr(CurrReport.ObjectId(false), StrPos(CurrReport.ObjectId(false), ' ') + 1));
        ReportForNav.OnInit(id, ReportForNavAllowDesign);
    end;

    local procedure ReportsForNavPre()
    begin
        if ReportForNav.LaunchDesigner(ReportForNavOpenDesigner) then CurrReport.Quit();
    end;

    local procedure ReportForNavSetTotalsCausedBy(value: Boolean)
    begin
        ReportForNavTotalsCausedBy := value;
    end;

    local procedure ReportForNavSetShowOutput(value: Boolean)
    begin
        ReportForNavShowOutput := value;
    end;

    local procedure ReportForNavInit(jsonObject: JsonObject)
    begin
        ReportForNav.Init(jsonObject, CurrReport.ObjectId());
    end;

    local procedure ReportForNavWriteDataItem(dataItemId: Text; rec: Variant): Text
    var
        values: Text;
        jsonObject: JsonObject;

    begin
        if not ReportForNavInitialized then begin
            ReportForNavInit(jsonObject);
            ReportForNavInitialized := true;
        end;

        case (dataItemId) of
            'Header':

                jsonObject.Add('CurrReport$Language$Integer', CurrReport.Language);

        end;
        ReportForNav.AddDataItemValues(jsonObject, dataItemId, rec);
        jsonObject.WriteTo(values);
        exit(values);
    end;
    // Reports ForNAV Autogenerated code - do not delete or modify -->
}
