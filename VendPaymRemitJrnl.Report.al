#pragma warning disable AA0005, AA0008, AA0018, AA0021, AA0072, AA0137, AA0201, AA0204, AA0206, AA0218, AA0228, AL0254, AL0424, AS0011, AW0006 // ForNAV settings
Report 53008 "TFB Vend. Paym. Remit. - Jrnl."
{
    DataAccessIntent = ReadOnly;
    Caption = 'Remittance Advice - Journal';
    WordLayout = './Layouts/TFBVendorPaymRemittance-J.docx';
    DefaultLayout = Word;

    dataset
    {
        dataitem(PaymentLedgerEntries; "Gen. Journal Line")
        {
            RequestFilterFields = "Journal Template Name", "Journal Batch Name", "Posting Date", "Document No.";
            DataItemTableView = sorting("Journal Template Name", "Journal Batch Name", "Line No.");
            column(ReportForNavId_1; 1) { } // Autogenerated by ForNav - Do not delete
            column(ReportForNav_PaymentLedgerEntries; ReportForNavWriteDataItem('PaymentLedgerEntries', PaymentLedgerEntries)) { }
            dataitem(AppliedLedgerEntries; "Vendor Ledger Entry")
            {
                CalcFields = "Original Amount", Amount;
                DataItemLink = "Applies-to ID" = FIELD("Applies-to ID"), "Vendor No." = FIELD("Account No.");
                DataItemTableView = sorting("Vendor No.", Open, Positive, "Due Date", "Currency Code") where(Open = CONST(true));
                column(ReportForNavId_2; 2) { } // Autogenerated by ForNav - Do not delete
                column(ReportForNav_AppliedLedgerEntries; ReportForNavWriteDataItem('AppliedLedgerEntries', AppliedLedgerEntries)) { }
                dataitem(DetailedLedgerEntries; "Detailed Vendor Ledg. Entry")
                {
                    DataItemLink = "Vendor Ledger Entry No." = FIELD("Entry No."), "Initial Document Type" = FIELD("Document Type");
                    DataItemTableView = sorting("Vendor Ledger Entry No.", "Entry Type", "Posting Date") where("Entry Type" = CONST(Application), "Document Type" = CONST("Credit Memo"));
                    column(ReportForNavId_3; 3) { } // Autogenerated by ForNav - Do not delete
                    column(ReportForNav_DetailedLedgerEntries; ReportForNavWriteDataItem('DetailedLedgerEntries', DetailedLedgerEntries)) { }
                    trigger OnPreDataItem();
                    begin
                        ReportForNav.OnPreDataItem('DetailedLedgerEntries', DetailedLedgerEntries);
                    end;

                    trigger OnAfterGetRecord();
                    begin
                        /*   VendLedgEntry3.Get("Applied Vend. Ledger Entry No.");
						  if "Vendor Ledger Entry No." <> "Applied Vend. Ledger Entry No." then
							  InsertTempEntry(VendLedgEntry3); */
                    end;

                }
                trigger OnPreDataItem();
                begin
                    if PaymentLedgerEntries."Applies-to ID" = '' then
                        CurrReport.Break();
                    AppliedLedgerEntries.SetView(ReportForNav.OnPreDataItemView('AppliedLedgerEntries', AppliedLedgerEntries));
                end;

                trigger OnAfterGetRecord();
                begin
                    // InsertTempEntry("Vendor Ledger Entry")
                end;

            }
            trigger OnPreDataItem();
            begin
                ReportForNav.OnPreDataItem('PaymentLedgerEntries', PaymentLedgerEntries);
            end;


        }
    }
    requestpage
    {
        SaveValues = false;
        layout
        {
        }

    }

    trigger OnInitReport()
    begin
        ;
        ReportsForNavInit;

    end;

    trigger OnPostReport()
    begin

    end;

    trigger OnPreReport()
    begin
        ;
        ReportsForNavPre;
    end;

    // --> Reports ForNAV Autogenerated code - do not delete or modify
    var
        ReportForNav: Codeunit "ForNAV Report Management";
        ReportForNavTotalsCausedBy: Integer;
        ReportForNavInitialized: Boolean;
        ReportForNavShowOutput: Boolean;

    local procedure ReportsForNavInit()
    var
        id: Integer;
    begin
        Evaluate(id, CopyStr(CurrReport.ObjectId(false), StrPos(CurrReport.ObjectId(false), ' ') + 1));
        ReportForNav.OnInit(id);
    end;

    local procedure ReportsForNavPre()
    begin
    end;

    local procedure ReportForNavSetTotalsCausedBy(value: Integer)
    begin
        ReportForNavTotalsCausedBy := value;
    end;

    local procedure ReportForNavSetShowOutput(value: Boolean)
    begin
        ReportForNavShowOutput := value;
    end;

    local procedure ReportForNavInit(jsonObject: JsonObject)
    begin
        ReportForNav.Init(jsonObject, CurrReport.ObjectId);
    end;

    local procedure ReportForNavWriteDataItem(dataItemId: Text; rec: Variant): Text
    var
        values: Text;
        jsonObject: JsonObject;
        currLanguage: Integer;
    begin
        if not ReportForNavInitialized then begin
            ReportForNavInit(jsonObject);
            ReportForNavInitialized := true;
        end;

        case (dataItemId) of
        end;
        ReportForNav.AddDataItemValues(jsonObject, dataItemId, rec);
        jsonObject.WriteTo(values);
        exit(values);
    end;
    // Reports ForNAV Autogenerated code - do not delete or modify -->
}
